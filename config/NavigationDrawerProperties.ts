import { Component, PropertyType } from '~/enums'

export const navigationDrawerProperties = [
  {
    groupName: 'Positioning',
    props: [
      {
        name: 'location',
        title: 'Location',
        component: Component.SELECT,
        multiple: false,
        clearable: true,
        items: ['start', 'end', 'left', 'right', 'top', 'bottom'],
        default: 'start',
        type: PropertyType.PROP,
        description: 'Controls the edge of the screen the drawer is attached to.',
      },
      {
        name: 'order',
        default: 0,
        type: PropertyType.PROP,
        component: Component.NUMBER_SELECTOR,
        minValue: -5,
        maxValue: 5,
        title: 'Order',
        clearable: true,
        description: 'Adjust the order of the component in relation to its registration order.',
      },
      {
        name: 'absolute',
        title: 'Absolute',
        component: Component.SWITCH,
        default: false,
        description: 'Applies position: absolute to the component.',
        type: PropertyType.PROP,
      },
    ],
  },
  {
    groupName: 'Appearance',
    props: [
      {
        name: 'border',
        title: 'Border',
        component: Component.SELECT,
        items: ['xs', 'sm', 'md', 'lg', 'xl'],
        default: false,
        clearable: true,
        type: PropertyType.PROP,
        description: 'Designates the border-radius applied to the component. This can be xs, sm, md, lg, xl.',
      },
      // {
      //   name: 'color',
      //   type: 'string',
      //   default: 'undefined',
      //   description: 'Applies specified color to the control - supports utility colors or css color.',
      // },

      {
        name: 'rounded',
        title: 'Rounded',
        component: Component.SELECT,
        items: [0, 'xs', 'sm', 'true', 'lg', 'xl', 'pill', 'circle', 'shaped'],
        type: PropertyType.PROP,
        description: 'Designates the border-radius applied to the component.',
      },
      {
        name: 'elevation',
        title: 'Elevation',
        component: Component.NUMBER_SELECTOR,
        default: 0,
        minValue: 0,
        maxValue: 24,
        type: PropertyType.PROP,
        description: 'Designates an elevation applied to the component between 0 and 24.',
      },

      {
        name: 'scrim',
        title: 'Scrim',
        component: Component.SWITCH,
        default: true,
        description: 'Determines whether an overlay is used when a temporary drawer is open. Accepts true/false to enable background, and string to define color.',
      },
      {
        name: 'image',
        title: 'Image',
        component: Component.SWITCH,
        activeValue: 'https://picsum.photos/1920/1080?random',
        description: 'Apply a specific background image to the component.',
        type: PropertyType.PROP,
      },
      {
        name: 'floating',
        title: 'Floating',
        component: Component.SWITCH,
        default: false,
        type: PropertyType.PROP,
        description: 'A floating drawer has no visible container (no border-right).',
      },
      {
        name: 'tile',
        title: 'Tile',
        default: false,
        component: Component.SWITCH,
        description: 'Removes any applied border-radius from the component.',
        type: PropertyType.PROP,
      },
    ],
  },
  {
    groupName: 'Behavior',
    props: [
      {
        name: 'close-delay',
        title: 'Close Delay',
        component: Component.NUMBER_SELECTOR,
        default: 0,
        minValue: 0,
        maxValue: 9999,
        description: 'Milliseconds to wait before closing component. Only applies to hover and focus events.',
        type: PropertyType.PROP,

      },
      {
        name: 'open-delay',
        title: 'Open Delay',
        component: Component.NUMBER_SELECTOR,
        default: 0,
        minValue: 0,
        maxValue: 9999,
        type: PropertyType.PROP,
        description: 'Milliseconds to wait before opening component. Only applies to hover and focus events.',
      },
      {
        name: 'disable-resize-watcher',
        title: 'Disable Resize Watcher',
        component: Component.SWITCH,
        default: false,
        type: PropertyType.PROP,
        description: 'Prevents the automatic opening or closing of the drawer when resized, based on whether the device is mobile or desktop.',
      },
      {
        name: 'disable-route-watcher',
        title: 'Disable Route Watcher',
        component: Component.SWITCH,
        default: false,
        type: PropertyType.PROP,
        description: 'Disables opening of navigation drawer when route changes.',
      },
      {
        name: 'expand-on-hover',
        title: 'Expand On Hover',
        component: Component.SWITCH,
        default: false,
        type: PropertyType.PROP,
        description: 'Collapses the drawer to a mini-variant until hovering with the mouse.',
      },

      {
        name: 'persistent',
        title: 'Persistent',
        component: Component.SWITCH,
        default: true,
        type: PropertyType.PROP,
        description: 'Clicking outside or pressing esc key will not dismiss the dialog.',
      },
      {
        name: 'rail',
        title: 'Rail',
        component: Component.SWITCH,
        default: false,
        type: PropertyType.PROP,
        description: 'Sets the component width to the rail-width value.',
      },
      {
        name: 'temporary',
        title: 'Rail',
        component: Component.SWITCH,
        default: false,
        type: PropertyType.PROP,
        description: 'A temporary drawer sits above its application and uses a scrim (overlay) to darken the background.',
      },
      {
        name: 'touchless',
        title: 'Touchless',
        component: Component.SWITCH,
        default: false,
        type: PropertyType.PROP,
        description: 'Disable mobile touch functionality.',
      },
      {
        name: 'sticky',
        title: 'Sticky',
        component: Component.SWITCH,
        default: false,
        type: PropertyType.PROP,
        description: 'Makes the drawer sticky.',

      },
    ],
  },
  {
    groupName: 'Size and Dimension',
    props: [
      {
        name: 'rail-width',
        default: 56,
        title: 'Rail Width',
        component: Component.NUMBER_SELECTOR,
        minValue: 0,
        maxValue: 900,
        type: PropertyType.PROP,
        description: 'Sets the width for the component when rail is enabled.',
      },
      {
        name: 'width',
        title: 'Width',
        component: Component.NUMBER_SELECTOR,
        default: 256,
        minValue: 0,
        maxValue: 900,
        description: 'Sets the width for the component.',
      },
    ],
  },
  {
    groupName: 'Responsive',
    props: [
      {
        name: 'mobile-breakpoint',
        title: 'Mobile Breakpoint',
        component: Component.SELECT,
        multiple: false,
        items: ['xs', 'sm', 'md', 'lg', 'xl', 'xxl'], // todo: handle numberSS
        type: PropertyType.PROP,
        description: 'Sets the designated mobile breakpoint for the component. Applies alternate styles for mobile devices when the breakpoint value is met.',
      },
      {
        name: 'mobile',
        title: 'Mobile',
        component: Component.SWITCH,
        default: null,
        type: PropertyType.PROP,
        description: 'Determines the display mode of the component. If true, the component will be displayed in mobile mode. If false, the component will be displayed in desktop mode. If null, will be based on the current mobile-breakpoint.',
      },
      {
        name: 'permanent',
        title: 'Permanent',
        component: Component.SWITCH,
        default: true,
        type: PropertyType.PROP,
        description: 'The drawer remains visible regardless of screen size.',
      },
    ],
  },
]
